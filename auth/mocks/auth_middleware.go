// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package authmocks

import (
	"context"
	"github.com/ONSdigital/dis-bundle-api/auth"
	"github.com/ONSdigital/dis-bundle-api/models"
	"github.com/ONSdigital/dp-authorisation/v2/authorisation"
	"github.com/ONSdigital/dp-healthcheck/healthcheck"
	"github.com/ONSdigital/dp-permissions-api/sdk"
	"net/http"
	"sync"
)

// Ensure, that AuthorisationMiddlewareMock does implement auth.AuthorisationMiddleware.
// If this is not the case, regenerate this file with moq.
var _ auth.AuthorisationMiddleware = &AuthorisationMiddlewareMock{}

// AuthorisationMiddlewareMock is a mock implementation of auth.AuthorisationMiddleware.
//
//	func TestSomethingThatUsesAuthorisationMiddleware(t *testing.T) {
//
//		// make and configure a mocked auth.AuthorisationMiddleware
//		mockedAuthorisationMiddleware := &AuthorisationMiddlewareMock{
//			CloseFunc: func(ctx context.Context) error {
//				panic("mock out the Close method")
//			},
//			GetJWTEntityDataFunc: func(r *http.Request) (*sdk.EntityData, *models.Error) {
//				panic("mock out the GetJWTEntityData method")
//			},
//			HealthCheckFunc: func(ctx context.Context, state *healthcheck.CheckState) error {
//				panic("mock out the HealthCheck method")
//			},
//			IdentityHealthCheckFunc: func(ctx context.Context, state *healthcheck.CheckState) error {
//				panic("mock out the IdentityHealthCheck method")
//			},
//			ParseFunc: func(token string) (*sdk.EntityData, error) {
//				panic("mock out the Parse method")
//			},
//			RequireFunc: func(permission string, handlerFunc http.HandlerFunc) http.HandlerFunc {
//				panic("mock out the Require method")
//			},
//			RequireWithAttributesFunc: func(permission string, handlerFunc http.HandlerFunc, getAttributes authorisation.GetAttributesFromRequest) http.HandlerFunc {
//				panic("mock out the RequireWithAttributes method")
//			},
//		}
//
//		// use mockedAuthorisationMiddleware in code that requires auth.AuthorisationMiddleware
//		// and then make assertions.
//
//	}
type AuthorisationMiddlewareMock struct {
	// CloseFunc mocks the Close method.
	CloseFunc func(ctx context.Context) error

	// GetJWTEntityDataFunc mocks the GetJWTEntityData method.
	GetJWTEntityDataFunc func(r *http.Request) (*sdk.EntityData, *models.Error)

	// HealthCheckFunc mocks the HealthCheck method.
	HealthCheckFunc func(ctx context.Context, state *healthcheck.CheckState) error

	// IdentityHealthCheckFunc mocks the IdentityHealthCheck method.
	IdentityHealthCheckFunc func(ctx context.Context, state *healthcheck.CheckState) error

	// ParseFunc mocks the Parse method.
	ParseFunc func(token string) (*sdk.EntityData, error)

	// RequireFunc mocks the Require method.
	RequireFunc func(permission string, handlerFunc http.HandlerFunc) http.HandlerFunc

	// RequireWithAttributesFunc mocks the RequireWithAttributes method.
	RequireWithAttributesFunc func(permission string, handlerFunc http.HandlerFunc, getAttributes authorisation.GetAttributesFromRequest) http.HandlerFunc

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetJWTEntityData holds details about calls to the GetJWTEntityData method.
		GetJWTEntityData []struct {
			// R is the r argument value.
			R *http.Request
		}
		// HealthCheck holds details about calls to the HealthCheck method.
		HealthCheck []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// State is the state argument value.
			State *healthcheck.CheckState
		}
		// IdentityHealthCheck holds details about calls to the IdentityHealthCheck method.
		IdentityHealthCheck []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// State is the state argument value.
			State *healthcheck.CheckState
		}
		// Parse holds details about calls to the Parse method.
		Parse []struct {
			// Token is the token argument value.
			Token string
		}
		// Require holds details about calls to the Require method.
		Require []struct {
			// Permission is the permission argument value.
			Permission string
			// HandlerFunc is the handlerFunc argument value.
			HandlerFunc http.HandlerFunc
		}
		// RequireWithAttributes holds details about calls to the RequireWithAttributes method.
		RequireWithAttributes []struct {
			// Permission is the permission argument value.
			Permission string
			// HandlerFunc is the handlerFunc argument value.
			HandlerFunc http.HandlerFunc
			// GetAttributes is the getAttributes argument value.
			GetAttributes authorisation.GetAttributesFromRequest
		}
	}
	lockClose                 sync.RWMutex
	lockGetJWTEntityData      sync.RWMutex
	lockHealthCheck           sync.RWMutex
	lockIdentityHealthCheck   sync.RWMutex
	lockParse                 sync.RWMutex
	lockRequire               sync.RWMutex
	lockRequireWithAttributes sync.RWMutex
}

// Close calls CloseFunc.
func (mock *AuthorisationMiddlewareMock) Close(ctx context.Context) error {
	if mock.CloseFunc == nil {
		panic("AuthorisationMiddlewareMock.CloseFunc: method is nil but AuthorisationMiddleware.Close was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc(ctx)
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//
//	len(mockedAuthorisationMiddleware.CloseCalls())
func (mock *AuthorisationMiddlewareMock) CloseCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// GetJWTEntityData calls GetJWTEntityDataFunc.
func (mock *AuthorisationMiddlewareMock) GetJWTEntityData(r *http.Request) (*sdk.EntityData, *models.Error) {
	if mock.GetJWTEntityDataFunc == nil {
		panic("AuthorisationMiddlewareMock.GetJWTEntityDataFunc: method is nil but AuthorisationMiddleware.GetJWTEntityData was just called")
	}
	callInfo := struct {
		R *http.Request
	}{
		R: r,
	}
	mock.lockGetJWTEntityData.Lock()
	mock.calls.GetJWTEntityData = append(mock.calls.GetJWTEntityData, callInfo)
	mock.lockGetJWTEntityData.Unlock()
	return mock.GetJWTEntityDataFunc(r)
}

// GetJWTEntityDataCalls gets all the calls that were made to GetJWTEntityData.
// Check the length with:
//
//	len(mockedAuthorisationMiddleware.GetJWTEntityDataCalls())
func (mock *AuthorisationMiddlewareMock) GetJWTEntityDataCalls() []struct {
	R *http.Request
} {
	var calls []struct {
		R *http.Request
	}
	mock.lockGetJWTEntityData.RLock()
	calls = mock.calls.GetJWTEntityData
	mock.lockGetJWTEntityData.RUnlock()
	return calls
}

// HealthCheck calls HealthCheckFunc.
func (mock *AuthorisationMiddlewareMock) HealthCheck(ctx context.Context, state *healthcheck.CheckState) error {
	if mock.HealthCheckFunc == nil {
		panic("AuthorisationMiddlewareMock.HealthCheckFunc: method is nil but AuthorisationMiddleware.HealthCheck was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		State *healthcheck.CheckState
	}{
		Ctx:   ctx,
		State: state,
	}
	mock.lockHealthCheck.Lock()
	mock.calls.HealthCheck = append(mock.calls.HealthCheck, callInfo)
	mock.lockHealthCheck.Unlock()
	return mock.HealthCheckFunc(ctx, state)
}

// HealthCheckCalls gets all the calls that were made to HealthCheck.
// Check the length with:
//
//	len(mockedAuthorisationMiddleware.HealthCheckCalls())
func (mock *AuthorisationMiddlewareMock) HealthCheckCalls() []struct {
	Ctx   context.Context
	State *healthcheck.CheckState
} {
	var calls []struct {
		Ctx   context.Context
		State *healthcheck.CheckState
	}
	mock.lockHealthCheck.RLock()
	calls = mock.calls.HealthCheck
	mock.lockHealthCheck.RUnlock()
	return calls
}

// IdentityHealthCheck calls IdentityHealthCheckFunc.
func (mock *AuthorisationMiddlewareMock) IdentityHealthCheck(ctx context.Context, state *healthcheck.CheckState) error {
	if mock.IdentityHealthCheckFunc == nil {
		panic("AuthorisationMiddlewareMock.IdentityHealthCheckFunc: method is nil but AuthorisationMiddleware.IdentityHealthCheck was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		State *healthcheck.CheckState
	}{
		Ctx:   ctx,
		State: state,
	}
	mock.lockIdentityHealthCheck.Lock()
	mock.calls.IdentityHealthCheck = append(mock.calls.IdentityHealthCheck, callInfo)
	mock.lockIdentityHealthCheck.Unlock()
	return mock.IdentityHealthCheckFunc(ctx, state)
}

// IdentityHealthCheckCalls gets all the calls that were made to IdentityHealthCheck.
// Check the length with:
//
//	len(mockedAuthorisationMiddleware.IdentityHealthCheckCalls())
func (mock *AuthorisationMiddlewareMock) IdentityHealthCheckCalls() []struct {
	Ctx   context.Context
	State *healthcheck.CheckState
} {
	var calls []struct {
		Ctx   context.Context
		State *healthcheck.CheckState
	}
	mock.lockIdentityHealthCheck.RLock()
	calls = mock.calls.IdentityHealthCheck
	mock.lockIdentityHealthCheck.RUnlock()
	return calls
}

// Parse calls ParseFunc.
func (mock *AuthorisationMiddlewareMock) Parse(token string) (*sdk.EntityData, error) {
	if mock.ParseFunc == nil {
		panic("AuthorisationMiddlewareMock.ParseFunc: method is nil but AuthorisationMiddleware.Parse was just called")
	}
	callInfo := struct {
		Token string
	}{
		Token: token,
	}
	mock.lockParse.Lock()
	mock.calls.Parse = append(mock.calls.Parse, callInfo)
	mock.lockParse.Unlock()
	return mock.ParseFunc(token)
}

// ParseCalls gets all the calls that were made to Parse.
// Check the length with:
//
//	len(mockedAuthorisationMiddleware.ParseCalls())
func (mock *AuthorisationMiddlewareMock) ParseCalls() []struct {
	Token string
} {
	var calls []struct {
		Token string
	}
	mock.lockParse.RLock()
	calls = mock.calls.Parse
	mock.lockParse.RUnlock()
	return calls
}

// Require calls RequireFunc.
func (mock *AuthorisationMiddlewareMock) Require(permission string, handlerFunc http.HandlerFunc) http.HandlerFunc {
	if mock.RequireFunc == nil {
		panic("AuthorisationMiddlewareMock.RequireFunc: method is nil but AuthorisationMiddleware.Require was just called")
	}
	callInfo := struct {
		Permission  string
		HandlerFunc http.HandlerFunc
	}{
		Permission:  permission,
		HandlerFunc: handlerFunc,
	}
	mock.lockRequire.Lock()
	mock.calls.Require = append(mock.calls.Require, callInfo)
	mock.lockRequire.Unlock()
	return mock.RequireFunc(permission, handlerFunc)
}

// RequireCalls gets all the calls that were made to Require.
// Check the length with:
//
//	len(mockedAuthorisationMiddleware.RequireCalls())
func (mock *AuthorisationMiddlewareMock) RequireCalls() []struct {
	Permission  string
	HandlerFunc http.HandlerFunc
} {
	var calls []struct {
		Permission  string
		HandlerFunc http.HandlerFunc
	}
	mock.lockRequire.RLock()
	calls = mock.calls.Require
	mock.lockRequire.RUnlock()
	return calls
}

// RequireWithAttributes calls RequireWithAttributesFunc.
func (mock *AuthorisationMiddlewareMock) RequireWithAttributes(permission string, handlerFunc http.HandlerFunc, getAttributes authorisation.GetAttributesFromRequest) http.HandlerFunc {
	if mock.RequireWithAttributesFunc == nil {
		panic("AuthorisationMiddlewareMock.RequireWithAttributesFunc: method is nil but AuthorisationMiddleware.RequireWithAttributes was just called")
	}
	callInfo := struct {
		Permission    string
		HandlerFunc   http.HandlerFunc
		GetAttributes authorisation.GetAttributesFromRequest
	}{
		Permission:    permission,
		HandlerFunc:   handlerFunc,
		GetAttributes: getAttributes,
	}
	mock.lockRequireWithAttributes.Lock()
	mock.calls.RequireWithAttributes = append(mock.calls.RequireWithAttributes, callInfo)
	mock.lockRequireWithAttributes.Unlock()
	return mock.RequireWithAttributesFunc(permission, handlerFunc, getAttributes)
}

// RequireWithAttributesCalls gets all the calls that were made to RequireWithAttributes.
// Check the length with:
//
//	len(mockedAuthorisationMiddleware.RequireWithAttributesCalls())
func (mock *AuthorisationMiddlewareMock) RequireWithAttributesCalls() []struct {
	Permission    string
	HandlerFunc   http.HandlerFunc
	GetAttributes authorisation.GetAttributesFromRequest
} {
	var calls []struct {
		Permission    string
		HandlerFunc   http.HandlerFunc
		GetAttributes authorisation.GetAttributesFromRequest
	}
	mock.lockRequireWithAttributes.RLock()
	calls = mock.calls.RequireWithAttributes
	mock.lockRequireWithAttributes.RUnlock()
	return calls
}
