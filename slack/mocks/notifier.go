// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/ONSdigital/dis-bundle-api/slack"
	"sync"
)

// Ensure, that NotifierMock does implement slack.Notifier.
// If this is not the case, regenerate this file with moq.
var _ slack.Notifier = &NotifierMock{}

// NotifierMock is a mock implementation of slack.Notifier.
//
//	func TestSomethingThatUsesNotifier(t *testing.T) {
//
//		// make and configure a mocked slack.Notifier
//		mockedNotifier := &NotifierMock{
//			SendErrorFunc: func(ctx context.Context, summary string, err error, details map[string]interface{}) error {
//				panic("mock out the SendError method")
//			},
//		}
//
//		// use mockedNotifier in code that requires slack.Notifier
//		// and then make assertions.
//
//	}
type NotifierMock struct {
	// SendErrorFunc mocks the SendError method.
	SendErrorFunc func(ctx context.Context, summary string, err error, details map[string]interface{}) error

	// calls tracks calls to the methods.
	calls struct {
		// SendError holds details about calls to the SendError method.
		SendError []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Summary is the summary argument value.
			Summary string
			// Err is the err argument value.
			Err error
			// Details is the details argument value.
			Details map[string]interface{}
		}
	}
	lockSendError sync.RWMutex
}

// SendError calls SendErrorFunc.
func (mock *NotifierMock) SendError(ctx context.Context, summary string, err error, details map[string]interface{}) error {
	if mock.SendErrorFunc == nil {
		panic("NotifierMock.SendErrorFunc: method is nil but Notifier.SendError was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Summary string
		Err     error
		Details map[string]interface{}
	}{
		Ctx:     ctx,
		Summary: summary,
		Err:     err,
		Details: details,
	}
	mock.lockSendError.Lock()
	mock.calls.SendError = append(mock.calls.SendError, callInfo)
	mock.lockSendError.Unlock()
	return mock.SendErrorFunc(ctx, summary, err, details)
}

// SendErrorCalls gets all the calls that were made to SendError.
// Check the length with:
//
//	len(mockedNotifier.SendErrorCalls())
func (mock *NotifierMock) SendErrorCalls() []struct {
	Ctx     context.Context
	Summary string
	Err     error
	Details map[string]interface{}
} {
	var calls []struct {
		Ctx     context.Context
		Summary string
		Err     error
		Details map[string]interface{}
	}
	mock.lockSendError.RLock()
	calls = mock.calls.SendError
	mock.lockSendError.RUnlock()
	return calls
}
