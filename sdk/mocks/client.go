// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/ONSdigital/dis-bundle-api/models"
	"github.com/ONSdigital/dis-bundle-api/sdk"
	apiError "github.com/ONSdigital/dis-bundle-api/sdk/errors"
	healthcheck "github.com/ONSdigital/dp-api-clients-go/v2/health"
	health "github.com/ONSdigital/dp-healthcheck/healthcheck"
	"sync"
	"time"
)

// Ensure, that ClienterMock does implement sdk.Clienter.
// If this is not the case, regenerate this file with moq.
var _ sdk.Clienter = &ClienterMock{}

// ClienterMock is a mock implementation of sdk.Clienter.
//
//	func TestSomethingThatUsesClienter(t *testing.T) {
//
//		// make and configure a mocked sdk.Clienter
//		mockedClienter := &ClienterMock{
//			CheckerFunc: func(ctx context.Context, check *health.CheckState) error {
//				panic("mock out the Checker method")
//			},
//			GetBundleFunc: func(ctx context.Context, headers sdk.Headers, id string) (*sdk.ResponseInfo, apiError.Error) {
//				panic("mock out the GetBundle method")
//			},
//			GetBundlesFunc: func(ctx context.Context, headers sdk.Headers, scheduledAt *time.Time, queryParams *sdk.QueryParams) (*sdk.BundlesList, apiError.Error) {
//				panic("mock out the GetBundles method")
//			},
//			HealthFunc: func() *healthcheck.Client {
//				panic("mock out the Health method")
//			},
//			PutBundleStateFunc: func(ctx context.Context, headers sdk.Headers, id string, state models.BundleState) (*models.Bundle, apiError.Error) {
//				panic("mock out the PutBundleState method")
//			},
//			URLFunc: func() string {
//				panic("mock out the URL method")
//			},
//		}
//
//		// use mockedClienter in code that requires sdk.Clienter
//		// and then make assertions.
//
//	}
type ClienterMock struct {
	// CheckerFunc mocks the Checker method.
	CheckerFunc func(ctx context.Context, check *health.CheckState) error

	// GetBundleFunc mocks the GetBundle method.
	GetBundleFunc func(ctx context.Context, headers sdk.Headers, id string) (*sdk.ResponseInfo, apiError.Error)

	// GetBundlesFunc mocks the GetBundles method.
	GetBundlesFunc func(ctx context.Context, headers sdk.Headers, scheduledAt *time.Time, queryParams *sdk.QueryParams) (*sdk.BundlesList, apiError.Error)

	// HealthFunc mocks the Health method.
	HealthFunc func() *healthcheck.Client

	// PutBundleStateFunc mocks the PutBundleState method.
	PutBundleStateFunc func(ctx context.Context, headers sdk.Headers, id string, state models.BundleState) (*models.Bundle, apiError.Error)

	// URLFunc mocks the URL method.
	URLFunc func() string

	// calls tracks calls to the methods.
	calls struct {
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Check is the check argument value.
			Check *health.CheckState
		}
		// GetBundle holds details about calls to the GetBundle method.
		GetBundle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Headers is the headers argument value.
			Headers sdk.Headers
			// ID is the id argument value.
			ID string
		}
		// GetBundles holds details about calls to the GetBundles method.
		GetBundles []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Headers is the headers argument value.
			Headers sdk.Headers
			// ScheduledAt is the scheduledAt argument value.
			ScheduledAt *time.Time
			// QueryParams is the queryParams argument value.
			QueryParams *sdk.QueryParams
		}
		// Health holds details about calls to the Health method.
		Health []struct {
		}
		// PutBundleState holds details about calls to the PutBundleState method.
		PutBundleState []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Headers is the headers argument value.
			Headers sdk.Headers
			// ID is the id argument value.
			ID string
			// State is the state argument value.
			State models.BundleState
		}
		// URL holds details about calls to the URL method.
		URL []struct {
		}
	}
	lockChecker        sync.RWMutex
	lockGetBundle      sync.RWMutex
	lockGetBundles     sync.RWMutex
	lockHealth         sync.RWMutex
	lockPutBundleState sync.RWMutex
	lockURL            sync.RWMutex
}

// Checker calls CheckerFunc.
func (mock *ClienterMock) Checker(ctx context.Context, check *health.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("ClienterMock.CheckerFunc: method is nil but Clienter.Checker was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Check *health.CheckState
	}{
		Ctx:   ctx,
		Check: check,
	}
	mock.lockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	mock.lockChecker.Unlock()
	return mock.CheckerFunc(ctx, check)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//
//	len(mockedClienter.CheckerCalls())
func (mock *ClienterMock) CheckerCalls() []struct {
	Ctx   context.Context
	Check *health.CheckState
} {
	var calls []struct {
		Ctx   context.Context
		Check *health.CheckState
	}
	mock.lockChecker.RLock()
	calls = mock.calls.Checker
	mock.lockChecker.RUnlock()
	return calls
}

// GetBundle calls GetBundleFunc.
func (mock *ClienterMock) GetBundle(ctx context.Context, headers sdk.Headers, id string) (*sdk.ResponseInfo, apiError.Error) {
	if mock.GetBundleFunc == nil {
		panic("ClienterMock.GetBundleFunc: method is nil but Clienter.GetBundle was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Headers sdk.Headers
		ID      string
	}{
		Ctx:     ctx,
		Headers: headers,
		ID:      id,
	}
	mock.lockGetBundle.Lock()
	mock.calls.GetBundle = append(mock.calls.GetBundle, callInfo)
	mock.lockGetBundle.Unlock()
	return mock.GetBundleFunc(ctx, headers, id)
}

// GetBundleCalls gets all the calls that were made to GetBundle.
// Check the length with:
//
//	len(mockedClienter.GetBundleCalls())
func (mock *ClienterMock) GetBundleCalls() []struct {
	Ctx     context.Context
	Headers sdk.Headers
	ID      string
} {
	var calls []struct {
		Ctx     context.Context
		Headers sdk.Headers
		ID      string
	}
	mock.lockGetBundle.RLock()
	calls = mock.calls.GetBundle
	mock.lockGetBundle.RUnlock()
	return calls
}

// GetBundles calls GetBundlesFunc.
func (mock *ClienterMock) GetBundles(ctx context.Context, headers sdk.Headers, scheduledAt *time.Time, queryParams *sdk.QueryParams) (*sdk.BundlesList, apiError.Error) {
	if mock.GetBundlesFunc == nil {
		panic("ClienterMock.GetBundlesFunc: method is nil but Clienter.GetBundles was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Headers     sdk.Headers
		ScheduledAt *time.Time
		QueryParams *sdk.QueryParams
	}{
		Ctx:         ctx,
		Headers:     headers,
		ScheduledAt: scheduledAt,
		QueryParams: queryParams,
	}
	mock.lockGetBundles.Lock()
	mock.calls.GetBundles = append(mock.calls.GetBundles, callInfo)
	mock.lockGetBundles.Unlock()
	return mock.GetBundlesFunc(ctx, headers, scheduledAt, queryParams)
}

// GetBundlesCalls gets all the calls that were made to GetBundles.
// Check the length with:
//
//	len(mockedClienter.GetBundlesCalls())
func (mock *ClienterMock) GetBundlesCalls() []struct {
	Ctx         context.Context
	Headers     sdk.Headers
	ScheduledAt *time.Time
	QueryParams *sdk.QueryParams
} {
	var calls []struct {
		Ctx         context.Context
		Headers     sdk.Headers
		ScheduledAt *time.Time
		QueryParams *sdk.QueryParams
	}
	mock.lockGetBundles.RLock()
	calls = mock.calls.GetBundles
	mock.lockGetBundles.RUnlock()
	return calls
}

// Health calls HealthFunc.
func (mock *ClienterMock) Health() *healthcheck.Client {
	if mock.HealthFunc == nil {
		panic("ClienterMock.HealthFunc: method is nil but Clienter.Health was just called")
	}
	callInfo := struct {
	}{}
	mock.lockHealth.Lock()
	mock.calls.Health = append(mock.calls.Health, callInfo)
	mock.lockHealth.Unlock()
	return mock.HealthFunc()
}

// HealthCalls gets all the calls that were made to Health.
// Check the length with:
//
//	len(mockedClienter.HealthCalls())
func (mock *ClienterMock) HealthCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockHealth.RLock()
	calls = mock.calls.Health
	mock.lockHealth.RUnlock()
	return calls
}

// PutBundleState calls PutBundleStateFunc.
func (mock *ClienterMock) PutBundleState(ctx context.Context, headers sdk.Headers, id string, state models.BundleState) (*models.Bundle, apiError.Error) {
	if mock.PutBundleStateFunc == nil {
		panic("ClienterMock.PutBundleStateFunc: method is nil but Clienter.PutBundleState was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Headers sdk.Headers
		ID      string
		State   models.BundleState
	}{
		Ctx:     ctx,
		Headers: headers,
		ID:      id,
		State:   state,
	}
	mock.lockPutBundleState.Lock()
	mock.calls.PutBundleState = append(mock.calls.PutBundleState, callInfo)
	mock.lockPutBundleState.Unlock()
	return mock.PutBundleStateFunc(ctx, headers, id, state)
}

// PutBundleStateCalls gets all the calls that were made to PutBundleState.
// Check the length with:
//
//	len(mockedClienter.PutBundleStateCalls())
func (mock *ClienterMock) PutBundleStateCalls() []struct {
	Ctx     context.Context
	Headers sdk.Headers
	ID      string
	State   models.BundleState
} {
	var calls []struct {
		Ctx     context.Context
		Headers sdk.Headers
		ID      string
		State   models.BundleState
	}
	mock.lockPutBundleState.RLock()
	calls = mock.calls.PutBundleState
	mock.lockPutBundleState.RUnlock()
	return calls
}

// URL calls URLFunc.
func (mock *ClienterMock) URL() string {
	if mock.URLFunc == nil {
		panic("ClienterMock.URLFunc: method is nil but Clienter.URL was just called")
	}
	callInfo := struct {
	}{}
	mock.lockURL.Lock()
	mock.calls.URL = append(mock.calls.URL, callInfo)
	mock.lockURL.Unlock()
	return mock.URLFunc()
}

// URLCalls gets all the calls that were made to URL.
// Check the length with:
//
//	len(mockedClienter.URLCalls())
func (mock *ClienterMock) URLCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockURL.RLock()
	calls = mock.calls.URL
	mock.lockURL.RUnlock()
	return calls
}
