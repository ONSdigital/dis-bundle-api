// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package datasetsmocks

import (
	"context"
	"github.com/ONSdigital/dis-bundle-api/datasets"
	"github.com/ONSdigital/dis-bundle-api/models"
	datasetmodels "github.com/ONSdigital/dp-dataset-api/models"
	"net/http"
	"sync"
)

// Ensure, that DatasetsVersionsClientMock does implement datasets.DatasetsVersionsClient.
// If this is not the case, regenerate this file with moq.
var _ datasets.DatasetsVersionsClient = &DatasetsVersionsClientMock{}

// DatasetsVersionsClientMock is a mock implementation of datasets.DatasetsVersionsClient.
//
//	func TestSomethingThatUsesDatasetsVersionsClient(t *testing.T) {
//
//		// make and configure a mocked datasets.DatasetsVersionsClient
//		mockedDatasetsVersionsClient := &DatasetsVersionsClientMock{
//			GetForContentItemFunc: func(ctx context.Context, r *http.Request, contentItem models.ContentItem) (*datasetmodels.Version, error) {
//				panic("mock out the GetForContentItem method")
//			},
//			UpdateStateForContentItemFunc: func(ctx context.Context, r *http.Request, contentItem models.ContentItem, targetState models.BundleState) error {
//				panic("mock out the UpdateStateForContentItem method")
//			},
//		}
//
//		// use mockedDatasetsVersionsClient in code that requires datasets.DatasetsVersionsClient
//		// and then make assertions.
//
//	}
type DatasetsVersionsClientMock struct {
	// GetForContentItemFunc mocks the GetForContentItem method.
	GetForContentItemFunc func(ctx context.Context, r *http.Request, contentItem models.ContentItem) (*datasetmodels.Version, error)

	// UpdateStateForContentItemFunc mocks the UpdateStateForContentItem method.
	UpdateStateForContentItemFunc func(ctx context.Context, r *http.Request, contentItem models.ContentItem, targetState models.BundleState) error

	// calls tracks calls to the methods.
	calls struct {
		// GetForContentItem holds details about calls to the GetForContentItem method.
		GetForContentItem []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// R is the r argument value.
			R *http.Request
			// ContentItem is the contentItem argument value.
			ContentItem models.ContentItem
		}
		// UpdateStateForContentItem holds details about calls to the UpdateStateForContentItem method.
		UpdateStateForContentItem []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// R is the r argument value.
			R *http.Request
			// ContentItem is the contentItem argument value.
			ContentItem models.ContentItem
			// TargetState is the targetState argument value.
			TargetState models.BundleState
		}
	}
	lockGetForContentItem         sync.RWMutex
	lockUpdateStateForContentItem sync.RWMutex
}

// GetForContentItem calls GetForContentItemFunc.
func (mock *DatasetsVersionsClientMock) GetForContentItem(ctx context.Context, r *http.Request, contentItem models.ContentItem) (*datasetmodels.Version, error) {
	if mock.GetForContentItemFunc == nil {
		panic("DatasetsVersionsClientMock.GetForContentItemFunc: method is nil but DatasetsVersionsClient.GetForContentItem was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		R           *http.Request
		ContentItem models.ContentItem
	}{
		Ctx:         ctx,
		R:           r,
		ContentItem: contentItem,
	}
	mock.lockGetForContentItem.Lock()
	mock.calls.GetForContentItem = append(mock.calls.GetForContentItem, callInfo)
	mock.lockGetForContentItem.Unlock()
	return mock.GetForContentItemFunc(ctx, r, contentItem)
}

// GetForContentItemCalls gets all the calls that were made to GetForContentItem.
// Check the length with:
//
//	len(mockedDatasetsVersionsClient.GetForContentItemCalls())
func (mock *DatasetsVersionsClientMock) GetForContentItemCalls() []struct {
	Ctx         context.Context
	R           *http.Request
	ContentItem models.ContentItem
} {
	var calls []struct {
		Ctx         context.Context
		R           *http.Request
		ContentItem models.ContentItem
	}
	mock.lockGetForContentItem.RLock()
	calls = mock.calls.GetForContentItem
	mock.lockGetForContentItem.RUnlock()
	return calls
}

// UpdateStateForContentItem calls UpdateStateForContentItemFunc.
func (mock *DatasetsVersionsClientMock) UpdateStateForContentItem(ctx context.Context, r *http.Request, contentItem models.ContentItem, targetState models.BundleState) error {
	if mock.UpdateStateForContentItemFunc == nil {
		panic("DatasetsVersionsClientMock.UpdateStateForContentItemFunc: method is nil but DatasetsVersionsClient.UpdateStateForContentItem was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		R           *http.Request
		ContentItem models.ContentItem
		TargetState models.BundleState
	}{
		Ctx:         ctx,
		R:           r,
		ContentItem: contentItem,
		TargetState: targetState,
	}
	mock.lockUpdateStateForContentItem.Lock()
	mock.calls.UpdateStateForContentItem = append(mock.calls.UpdateStateForContentItem, callInfo)
	mock.lockUpdateStateForContentItem.Unlock()
	return mock.UpdateStateForContentItemFunc(ctx, r, contentItem, targetState)
}

// UpdateStateForContentItemCalls gets all the calls that were made to UpdateStateForContentItem.
// Check the length with:
//
//	len(mockedDatasetsVersionsClient.UpdateStateForContentItemCalls())
func (mock *DatasetsVersionsClientMock) UpdateStateForContentItemCalls() []struct {
	Ctx         context.Context
	R           *http.Request
	ContentItem models.ContentItem
	TargetState models.BundleState
} {
	var calls []struct {
		Ctx         context.Context
		R           *http.Request
		ContentItem models.ContentItem
		TargetState models.BundleState
	}
	mock.lockUpdateStateForContentItem.RLock()
	calls = mock.calls.UpdateStateForContentItem
	mock.lockUpdateStateForContentItem.RUnlock()
	return calls
}
