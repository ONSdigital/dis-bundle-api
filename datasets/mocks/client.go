// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package datasetsmocks

import (
	"github.com/ONSdigital/dis-bundle-api/datasets"
	"sync"
)

// Ensure, that DatasetsClientMock does implement datasets.DatasetsClient.
// If this is not the case, regenerate this file with moq.
var _ datasets.DatasetsClient = &DatasetsClientMock{}

// DatasetsClientMock is a mock implementation of datasets.DatasetsClient.
//
//	func TestSomethingThatUsesDatasetsClient(t *testing.T) {
//
//		// make and configure a mocked datasets.DatasetsClient
//		mockedDatasetsClient := &DatasetsClientMock{
//			VersionsFunc: func() datasets.DatasetsVersionsClient {
//				panic("mock out the Versions method")
//			},
//		}
//
//		// use mockedDatasetsClient in code that requires datasets.DatasetsClient
//		// and then make assertions.
//
//	}
type DatasetsClientMock struct {
	// VersionsFunc mocks the Versions method.
	VersionsFunc func() datasets.DatasetsVersionsClient

	// calls tracks calls to the methods.
	calls struct {
		// Versions holds details about calls to the Versions method.
		Versions []struct {
		}
	}
	lockVersions sync.RWMutex
}

// Versions calls VersionsFunc.
func (mock *DatasetsClientMock) Versions() datasets.DatasetsVersionsClient {
	if mock.VersionsFunc == nil {
		panic("DatasetsClientMock.VersionsFunc: method is nil but DatasetsClient.Versions was just called")
	}
	callInfo := struct {
	}{}
	mock.lockVersions.Lock()
	mock.calls.Versions = append(mock.calls.Versions, callInfo)
	mock.lockVersions.Unlock()
	return mock.VersionsFunc()
}

// VersionsCalls gets all the calls that were made to Versions.
// Check the length with:
//
//	len(mockedDatasetsClient.VersionsCalls())
func (mock *DatasetsClientMock) VersionsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockVersions.RLock()
	calls = mock.calls.Versions
	mock.lockVersions.RUnlock()
	return calls
}
